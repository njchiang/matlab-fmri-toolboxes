This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) (preloaded format=mex 2014.5.25)  10 AUG 2015 16:47
entering extended mode
 restricted \write18 enabled.
 %&-line parsing enabled.
**spm_vol_utils.c -DSPM_UNSIGNED_CHAR
(./spm_vol_utils.c
This is MeX  Version 1.05  18 XII 1993  (B. Jackowski & M. Ry\'cko)
! You can't use `macro parameter character #' in vertical mode.
l.6 #
     define TINY 5e-2
? 
! Interruption.
<to be read again> 
                   d
l.6 #d
      efine TINY 5e-2
? 
! You can't use `macro parameter character #' in vertical mode.
l.8 #
     ifdef SPM_UNSIGNED_CHAR
? 
! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   _
l.8 #ifdef SPM_
               UNSIGNED_CHAR
? 
! You can't use `macro parameter character #' in math mode.
l.9 #
     define RESAMPLE resample_uchar
? 
! You can't use `macro parameter character #' in math mode.
l.10 #
      define RESAMPLE_D resample_d_uchar
? 
! Double subscript.
l.10 #define RESAMPLE_D resample_d_
                                   uchar
? 
! You can't use `macro parameter character #' in math mode.
l.11 #
      define SLICE slice_uchar
? 
! You can't use `macro parameter character #' in math mode.
l.12 #
      define RESAMPLE_0 resample_uchar_0
? q
OK, entering \batchmode...
! You can't use `macro parameter character #' in math mode.
l.13 #
      define RESAMPLE_1 resample_uchar_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.14 #
      define RESAMPLE_D_1 resample_d_uchar_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.14 #define RESAMPLE_D_
                        1 resample_d_uchar_1
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.14 #define RESAMPLE_D_1 resample_d_
                                     uchar_1
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.15 #
      define RESAMPLE_POLY resample_uchar_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.16 #
      define RESAMPLE_D_POLY resample_d_uchar_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.16 #define RESAMPLE_D_
                        POLY resample_d_uchar_poly
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.16 #define RESAMPLE_D_POLY resample_d_
                                        uchar_poly
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.17 #
      define SLICE_0 slice_uchar_0
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.18 #
      define SLICE_1 slice_uchar_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.19 #
      define SLICE_POLY slice_uchar_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.20 #
      define PLANE plane_uchar
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.21 #
      define GET(x) (x)
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.22 #
      define IMAGE_DTYPE unsigned char
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.23 #
      endif
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   \par 
l.24 
     
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.


Overfull \hbox (1849.64622pt too wide) in paragraph at lines 8--24
[]\tenrm ifdef SPM$[]\teni NSIGNED[]HARdefineRESAMPLEresample[]chardefineRESAMP
LE[]resample[][]chardefineSLICEslice[]chardefineRESAMPLE[]resample[]char[]defin
eRESAMPLE[]resample[]char[]defineRESAMPLE[][]resample[][]char[]defineRESAMPLE[]
OLYresample[]char[]olydefineRESAMPLE[][]OLYresample[][]char[]olydefineSLICE[]sl
ice[]char[]defineSLICE[]slice[]char[]defineSLICE[]OLYslice[]char[]olydefinePLAN
Eplane[]chardefineGET\tenrm (\teni x\tenrm )(\teni x\tenrm )\teni defineIMAGE[]
TYPEunsignedcharendif$ |

\hbox(7.5+2.86108)x469.75499, glue set - 1.0
.\hbox(0.0+0.0)x20.0
.\tenrm i
.\tenrm f
.\tenrm d
.\tenrm e
.etc.

! You can't use `macro parameter character #' in vertical mode.
l.25 #
      ifdef SPM_SIGNED_CHAR
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   _
l.25 #ifdef SPM_
                SIGNED_CHAR
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! You can't use `macro parameter character #' in math mode.
l.26 #
      define RESAMPLE resample_schar
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.27 #
      define RESAMPLE_D resample_d_schar
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.27 #define RESAMPLE_D resample_d_
                                   schar
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.28 #
      define SLICE slice_schar
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.29 #
      define RESAMPLE_0 resample_schar_0
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.30 #
      define RESAMPLE_1 resample_schar_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.31 #
      define RESAMPLE_D_1 resample_d_schar_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.31 #define RESAMPLE_D_
                        1 resample_d_schar_1
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.31 #define RESAMPLE_D_1 resample_d_
                                     schar_1
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.32 #
      define RESAMPLE_POLY resample_schar_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.33 #
      define RESAMPLE_D_POLY resample_d_schar_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.33 #define RESAMPLE_D_
                        POLY resample_d_schar_poly
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.33 #define RESAMPLE_D_POLY resample_d_
                                        schar_poly
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.34 #
      define SLICE_0 slice_schar_0
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.35 #
      define SLICE_1 slice_schar_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.36 #
      define SLICE_POLY slice_schar_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.37 #
      define PLANE plane_schar
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.38 #
      define GET(x) (x)
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.39 #
      define IMAGE_DTYPE signed char
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.40 #
      endif
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   \par 
l.41 
     
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.


Overfull \hbox (1809.73607pt too wide) in paragraph at lines 25--41
[]\tenrm ifdef SPM$[]\teni IGNED[]HARdefineRESAMPLEresample[]chardefineRESAMPLE
[]resample[][]chardefineSLICEslice[]chardefineRESAMPLE[]resample[]char[]defineR
ESAMPLE[]resample[]char[]defineRESAMPLE[][]resample[][]char[]defineRESAMPLE[]OL
Yresample[]char[]olydefineRESAMPLE[][]OLYresample[][]char[]olydefineSLICE[]slic
e[]char[]defineSLICE[]slice[]char[]defineSLICE[]OLYslice[]char[]olydefinePLANEp
lane[]chardefineGET\tenrm (\teni x\tenrm )(\teni x\tenrm )\teni defineIMAGE[]TY
PEsignedcharendif$ |

\hbox(7.5+2.86108)x469.75499, glue set - 1.0
.\hbox(0.0+0.0)x20.0
.\tenrm i
.\tenrm f
.\tenrm d
.\tenrm e
.etc.

! You can't use `macro parameter character #' in vertical mode.
l.42 #
      ifdef SPM_SIGNED_SHORT
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   _
l.42 #ifdef SPM_
                SIGNED_SHORT
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! You can't use `macro parameter character #' in math mode.
l.43 #
      ifdef SPM_BYTESWAP
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.44 #
      define GET(x) getshort(x)
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.45 #
      define RESAMPLE resample_short_s
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.46 #
      define RESAMPLE_D resample_d_short_s
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.46 #define RESAMPLE_D resample_d_
                                   short_s
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.47 #
      define SLICE slice_short_s
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.48 #
      define RESAMPLE_0 resample_short_s_0
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.48 #define RESAMPLE_0 resample_short_s_
                                         0
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.49 #
      define RESAMPLE_1 resample_short_s_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.49 #define RESAMPLE_1 resample_short_s_
                                         1
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.50 #
      define RESAMPLE_D_1 resample_d_short_s_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.50 #define RESAMPLE_D_
                        1 resample_d_short_s_1
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.50 #define RESAMPLE_D_1 resample_d_
                                     short_s_1
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.50 #define RESAMPLE_D_1 resample_d_short_s_
                                             1
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.51 #
      define RESAMPLE_POLY resample_short_s_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.51 #define RESAMPLE_POLY resample_short_s_
                                            poly
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.52 #
      define RESAMPLE_D_POLY resample_d_short_s_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.52 #define RESAMPLE_D_
                        POLY resample_d_short_s_poly
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.52 #define RESAMPLE_D_POLY resample_d_
                                        short_s_poly
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.52 #define RESAMPLE_D_POLY resample_d_short_s_
                                                poly
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.53 #
      define SLICE_0 slice_short_s_0
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.53 #define SLICE_0 slice_short_s_
                                   0
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.54 #
      define SLICE_1 slice_short_s_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.54 #define SLICE_1 slice_short_s_
                                   1
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.55 #
      define SLICE_POLY slice_short_s_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.55 #define SLICE_POLY slice_short_s_
                                      poly
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.56 #
      define PLANE plane_short_s
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.57 #
      else
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.58 #
      define GET(x) (x)
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.59 #
      define RESAMPLE resample_short
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.60 #
      define RESAMPLE_D resample_d_short
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.60 #define RESAMPLE_D resample_d_
                                   short
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.61 #
      define SLICE slice_short
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.62 #
      define RESAMPLE_0 resample_short_0
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.63 #
      define RESAMPLE_1 resample_short_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.64 #
      define RESAMPLE_D_1 resample_d_short_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.64 #define RESAMPLE_D_
                        1 resample_d_short_1
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.64 #define RESAMPLE_D_1 resample_d_
                                     short_1
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.65 #
      define RESAMPLE_POLY resample_short_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.66 #
      define RESAMPLE_D_POLY resample_d_short_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.66 #define RESAMPLE_D_
                        POLY resample_d_short_poly
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.66 #define RESAMPLE_D_POLY resample_d_
                                        short_poly
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.67 #
      define SLICE_0 slice_short_0
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.68 #
      define SLICE_1 slice_short_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.69 #
      define SLICE_POLY slice_short_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.70 #
      define PLANE plane_short
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.71 #
      endif
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.72 #
      define IMAGE_DTYPE short int
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.73 #
      endif
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   \par 
l.74 
     
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.


Overfull \hbox (3984.025pt too wide) in paragraph at lines 42--74
[]\tenrm ifdef SPM$[]\teni IGNED[]HORTifdefSPM[]YTESWAPdefineGET\tenrm (\teni x
\tenrm )\teni getshort\tenrm (\teni x\tenrm )\teni defineRESAMPLEresample[]hort
[]defineRESAMPLE[]resample[][]hort[]defineSLICEslice[]hort[]defineRESAMPLE[]res
ample[]hort[][]defineRESAMPLE[]resample[]hort[][]defineRESAMPLE[][]resample[][]
hort[][]defineRESAMPLE[]OLYresample[]hort[][]olydefineRESAMPLE[][]OLYresample[]
[]hort[][]olydefineSLICE[]slice[]hort[][]defineSLICE[]slice[]hort[][]defineSLIC
E[]OLYslice[]hort[][]olydefinePLANEplane[]hort[]elsedefineGET\tenrm (\teni x\te
nrm )(\teni x\tenrm )\teni defineRESAMPLEresample[]hortdefineRESAMPLE[]resample
[][]hortdefineSLICEslice[]hortdefineRESAMPLE[]resample[]hort[]defineRESAMPLE[]r
esample[]hort[]defineRESAMPLE[][]resample[][]hort[]defineRESAMPLE[]OLYresample[
]hort[]olydefineRESAMPLE[][]OLYresample[][]hort[]olydefineSLICE[]slice[]hort[]d
efineSLICE[]slice[]hort[]defineSLICE[]OLYslice[]hort[]olydefinePLANEplane[]hort
endifdefineIMAGE[]TYPEshortintendif$ |

\hbox(7.5+2.86108)x469.75499, glue set - 1.0
.\hbox(0.0+0.0)x20.0
.\tenrm i
.\tenrm f
.\tenrm d
.\tenrm e
.etc.

! You can't use `macro parameter character #' in vertical mode.
l.75 #
      ifdef SPM_UNSIGNED_SHORT
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   _
l.75 #ifdef SPM_
                UNSIGNED_SHORT
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! You can't use `macro parameter character #' in math mode.
l.76 #
      ifdef SPM_BYTESWAP
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.77 #
      define GET(x) getushort(x)
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.78 #
      define RESAMPLE resample_ushort_s
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.79 #
      define RESAMPLE_D resample_d_ushort_s
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.79 #define RESAMPLE_D resample_d_
                                   ushort_s
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.80 #
      define SLICE slice_ushort_s
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.81 #
      define RESAMPLE_0 resample_ushort_s_0
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.81 #define RESAMPLE_0 resample_ushort_s_
                                          0
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.82 #
      define RESAMPLE_1 resample_ushort_s_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.82 #define RESAMPLE_1 resample_ushort_s_
                                          1
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.83 #
      define RESAMPLE_D_1 resample_d_ushort_s_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.83 #define RESAMPLE_D_
                        1 resample_d_ushort_s_1
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.83 #define RESAMPLE_D_1 resample_d_
                                     ushort_s_1
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.83 #define RESAMPLE_D_1 resample_d_ushort_s_
                                              1
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.84 #
      define RESAMPLE_POLY resample_ushort_s_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.84 #define RESAMPLE_POLY resample_ushort_s_
                                             poly
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.85 #
      define RESAMPLE_D_POLY resample_d_ushort_s_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.85 #define RESAMPLE_D_
                        POLY resample_d_ushort_s_poly
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.85 #define RESAMPLE_D_POLY resample_d_
                                        ushort_s_poly
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.85 #define RESAMPLE_D_POLY resample_d_ushort_s_
                                                 poly
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.86 #
      define SLICE_0 slice_ushort_s_0
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.86 #define SLICE_0 slice_ushort_s_
                                    0
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.87 #
      define SLICE_1 slice_ushort_s_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.87 #define SLICE_1 slice_ushort_s_
                                    1
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.88 #
      define SLICE_POLY slice_ushort_s_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.88 #define SLICE_POLY slice_ushort_s_
                                       poly
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.89 #
      define PLANE plane_ushort_s
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.90 #
      else
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.91 #
      define GET(x) (x)
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.92 #
      define RESAMPLE resample_ushort
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.93 #
      define RESAMPLE_D resample_d_ushort
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.93 #define RESAMPLE_D resample_d_
                                   ushort
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.94 #
      define SLICE slice_ushort
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.95 #
      define RESAMPLE_0 resample_ushort_0
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.96 #
      define RESAMPLE_1 resample_ushort_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.97 #
      define RESAMPLE_D_1 resample_d_ushort_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.97 #define RESAMPLE_D_
                        1 resample_d_ushort_1
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.97 #define RESAMPLE_D_1 resample_d_
                                     ushort_1
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.98 #
      define RESAMPLE_POLY resample_ushort_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.99 #
      define RESAMPLE_D_POLY resample_d_ushort_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.99 #define RESAMPLE_D_
                        POLY resample_d_ushort_poly
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.99 #define RESAMPLE_D_POLY resample_d_
                                        ushort_poly
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.100 #
       define SLICE_0 slice_ushort_0
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.101 #
       define SLICE_1 slice_ushort_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.102 #
       define SLICE_POLY slice_ushort_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.103 #
       define PLANE plane_ushort
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.104 #
       endif
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.105 #
       define IMAGE_DTYPE unsigned short int
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.106 #
       endif
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   \par 
l.107 
      
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.


Overfull \hbox (4182.72913pt too wide) in paragraph at lines 75--107
[]\tenrm ifdef SPM$[]\teni NSIGNED[]HORTifdefSPM[]YTESWAPdefineGET\tenrm (\teni
 x\tenrm )\teni getushort\tenrm (\teni x\tenrm )\teni defineRESAMPLEresample[]s
hort[]defineRESAMPLE[]resample[][]short[]defineSLICEslice[]short[]defineRESAMPL
E[]resample[]short[][]defineRESAMPLE[]resample[]short[][]defineRESAMPLE[][]resa
mple[][]short[][]defineRESAMPLE[]OLYresample[]short[][]olydefineRESAMPLE[][]OLY
resample[][]short[][]olydefineSLICE[]slice[]short[][]defineSLICE[]slice[]short[
][]defineSLICE[]OLYslice[]short[][]olydefinePLANEplane[]short[]elsedefineGET\te
nrm (\teni x\tenrm )(\teni x\tenrm )\teni defineRESAMPLEresample[]shortdefineRE
SAMPLE[]resample[][]shortdefineSLICEslice[]shortdefineRESAMPLE[]resample[]short
[]defineRESAMPLE[]resample[]short[]defineRESAMPLE[][]resample[][]short[]defineR
ESAMPLE[]OLYresample[]short[]olydefineRESAMPLE[][]OLYresample[][]short[]olydefi
neSLICE[]slice[]short[]defineSLICE[]slice[]short[]defineSLICE[]OLYslice[]short[
]olydefinePLANEplane[]shortendifdefineIMAGE[]TYPEunsignedshortintendif$ |

\hbox(7.5+2.86108)x469.75499, glue set - 1.0
.\hbox(0.0+0.0)x20.0
.\tenrm i
.\tenrm f
.\tenrm d
.\tenrm e
.etc.

! You can't use `macro parameter character #' in vertical mode.
l.108 #
       ifdef SPM_SIGNED_INT
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   _
l.108 #ifdef SPM_
                 SIGNED_INT
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! You can't use `macro parameter character #' in math mode.
l.109 #
       ifdef SPM_BYTESWAP
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.110 #
       define GET(x) getint(x)
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.111 #
       define RESAMPLE resample_int_s
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.112 #
       define RESAMPLE_D resample_d_int_s
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.112 #define RESAMPLE_D resample_d_
                                    int_s
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.113 #
       define SLICE slice_int_s
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.114 #
       define RESAMPLE_0 resample_int_s_0
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.114 #define RESAMPLE_0 resample_int_s_
                                        0
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.115 #
       define RESAMPLE_1 resample_int_s_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.115 #define RESAMPLE_1 resample_int_s_
                                        1
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.116 #
       define RESAMPLE_D_1 resample_d_int_s_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.116 #define RESAMPLE_D_
                         1 resample_d_int_s_1
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.116 #define RESAMPLE_D_1 resample_d_
                                      int_s_1
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.116 #define RESAMPLE_D_1 resample_d_int_s_
                                            1
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.117 #
       define RESAMPLE_POLY resample_int_s_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.117 #define RESAMPLE_POLY resample_int_s_
                                           poly
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.118 #
       define RESAMPLE_D_POLY resample_d_int_s_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.118 #define RESAMPLE_D_
                         POLY resample_d_int_s_poly
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.118 #define RESAMPLE_D_POLY resample_d_
                                         int_s_poly
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.118 #define RESAMPLE_D_POLY resample_d_int_s_
                                               poly
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.119 #
       define SLICE_0 slice_int_s_0
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.119 #define SLICE_0 slice_int_s_
                                  0
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.120 #
       define SLICE_1 slice_int_s_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.120 #define SLICE_1 slice_int_s_
                                  1
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.121 #
       define SLICE_POLY slice_int_s_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.121 #define SLICE_POLY slice_int_s_
                                     poly
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.122 #
       define PLANE plane_int_s
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.123 #
       else
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.124 #
       define GET(x) (x)
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.125 #
       define RESAMPLE resample_int
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.126 #
       define RESAMPLE_D resample_d_int
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.126 #define RESAMPLE_D resample_d_
                                    int
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.127 #
       define SLICE slice_int
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.128 #
       define RESAMPLE_0 resample_int_0
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.129 #
       define RESAMPLE_1 resample_int_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.130 #
       define RESAMPLE_D_1 resample_d_int_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.130 #define RESAMPLE_D_
                         1 resample_d_int_1
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.130 #define RESAMPLE_D_1 resample_d_
                                      int_1
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.131 #
       define RESAMPLE_POLY resample_int_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.132 #
       define RESAMPLE_D_POLY resample_d_int_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.132 #define RESAMPLE_D_
                         POLY resample_d_int_poly
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.132 #define RESAMPLE_D_POLY resample_d_
                                         int_poly
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.133 #
       define SLICE_0 slice_int_0
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.134 #
       define SLICE_1 slice_int_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.135 #
       define SLICE_POLY slice_int_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.136 #
       define PLANE plane_int
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.137 #
       endif
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.138 #
       define IMAGE_DTYPE int
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.139 #
       endif
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   \par 
l.140 
      
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.


Overfull \hbox (3684.72865pt too wide) in paragraph at lines 108--140
[]\tenrm ifdef SPM$[]\teni IGNED[]NTifdefSPM[]YTESWAPdefineGET\tenrm (\teni x\t
enrm )\teni getint\tenrm (\teni x\tenrm )\teni defineRESAMPLEresample[]nt[]defi
neRESAMPLE[]resample[][]nt[]defineSLICEslice[]nt[]defineRESAMPLE[]resample[]nt[
][]defineRESAMPLE[]resample[]nt[][]defineRESAMPLE[][]resample[][]nt[][]defineRE
SAMPLE[]OLYresample[]nt[][]olydefineRESAMPLE[][]OLYresample[][]nt[][]olydefineS
LICE[]slice[]nt[][]defineSLICE[]slice[]nt[][]defineSLICE[]OLYslice[]nt[][]olyde
finePLANEplane[]nt[]elsedefineGET\tenrm (\teni x\tenrm )(\teni x\tenrm )\teni d
efineRESAMPLEresample[]ntdefineRESAMPLE[]resample[][]ntdefineSLICEslice[]ntdefi
neRESAMPLE[]resample[]nt[]defineRESAMPLE[]resample[]nt[]defineRESAMPLE[][]resam
ple[][]nt[]defineRESAMPLE[]OLYresample[]nt[]olydefineRESAMPLE[][]OLYresample[][
]nt[]olydefineSLICE[]slice[]nt[]defineSLICE[]slice[]nt[]defineSLICE[]OLYslice[]
nt[]olydefinePLANEplane[]ntendifdefineIMAGE[]TYPEintendif$ |

\hbox(7.5+2.86108)x469.75499, glue set - 1.0
.\hbox(0.0+0.0)x20.0
.\tenrm i
.\tenrm f
.\tenrm d
.\tenrm e
.etc.

! You can't use `macro parameter character #' in vertical mode.
l.141 #
       ifdef SPM_UNSIGNED_INT
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   _
l.141 #ifdef SPM_
                 UNSIGNED_INT
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! You can't use `macro parameter character #' in math mode.
l.142 #
       ifdef SPM_BYTESWAP
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.143 #
       define GET(x) getuint(x)
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.144 #
       define RESAMPLE resample_uint_s
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.145 #
       define RESAMPLE_D resample_d_uint_s
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.145 #define RESAMPLE_D resample_d_
                                    uint_s
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.146 #
       define SLICE slice_uint_s
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.147 #
       define RESAMPLE_0 resample_uint_s_0
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.147 #define RESAMPLE_0 resample_uint_s_
                                         0
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.148 #
       define RESAMPLE_1 resample_uint_s_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.148 #define RESAMPLE_1 resample_uint_s_
                                         1
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.149 #
       define RESAMPLE_D_1 resample_d_uint_s_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.149 #define RESAMPLE_D_
                         1 resample_d_uint_s_1
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.149 #define RESAMPLE_D_1 resample_d_
                                      uint_s_1
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.149 #define RESAMPLE_D_1 resample_d_uint_s_
                                             1
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.150 #
       define RESAMPLE_POLY resample_uint_s_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.150 #define RESAMPLE_POLY resample_uint_s_
                                            poly
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.151 #
       define RESAMPLE_D_POLY resample_d_uint_s_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.151 #define RESAMPLE_D_
                         POLY resample_d_uint_s_poly
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.151 #define RESAMPLE_D_POLY resample_d_
                                         uint_s_poly
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.151 #define RESAMPLE_D_POLY resample_d_uint_s_
                                                poly
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.152 #
       define SLICE_0 slice_uint_s_0
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.152 #define SLICE_0 slice_uint_s_
                                   0
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.153 #
       define SLICE_1 slice_uint_s_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.153 #define SLICE_1 slice_uint_s_
                                   1
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.154 #
       define SLICE_POLY slice_uint_s_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.154 #define SLICE_POLY slice_uint_s_
                                      poly
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.155 #
       define PLANE plane_uint_s
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.156 #
       else
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.157 #
       define GET(x) (x)
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.158 #
       define RESAMPLE resample_uint
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.159 #
       define RESAMPLE_D resample_d_uint
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.159 #define RESAMPLE_D resample_d_
                                    uint
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.160 #
       define SLICE slice_uint
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.161 #
       define RESAMPLE_0 resample_uint_0
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.162 #
       define RESAMPLE_1 resample_uint_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.163 #
       define RESAMPLE_D_1 resample_d_uint_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.163 #define RESAMPLE_D_
                         1 resample_d_uint_1
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.163 #define RESAMPLE_D_1 resample_d_
                                      uint_1
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.164 #
       define RESAMPLE_POLY resample_uint_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.165 #
       define RESAMPLE_D_POLY resample_d_uint_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.165 #define RESAMPLE_D_
                         POLY resample_d_uint_poly
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.165 #define RESAMPLE_D_POLY resample_d_
                                         uint_poly
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.166 #
       define SLICE_0 slice_uint_0
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.167 #
       define SLICE_1 slice_uint_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.168 #
       define SLICE_POLY slice_uint_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.169 #
       define PLANE plane_uint
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.170 #
       endif
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.171 #
       define IMAGE_DTYPE unsigned int
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.172 #
       endif
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   \par 
l.173 
      
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.


Overfull \hbox (3876.2968pt too wide) in paragraph at lines 141--173
[]\tenrm ifdef SPM$[]\teni NSIGNED[]NTifdefSPM[]YTESWAPdefineGET\tenrm (\teni x
\tenrm )\teni getuint\tenrm (\teni x\tenrm )\teni defineRESAMPLEresample[]int[]
defineRESAMPLE[]resample[][]int[]defineSLICEslice[]int[]defineRESAMPLE[]resampl
e[]int[][]defineRESAMPLE[]resample[]int[][]defineRESAMPLE[][]resample[][]int[][
]defineRESAMPLE[]OLYresample[]int[][]olydefineRESAMPLE[][]OLYresample[][]int[][
]olydefineSLICE[]slice[]int[][]defineSLICE[]slice[]int[][]defineSLICE[]OLYslice
[]int[][]olydefinePLANEplane[]int[]elsedefineGET\tenrm (\teni x\tenrm )(\teni x
\tenrm )\teni defineRESAMPLEresample[]intdefineRESAMPLE[]resample[][]intdefineS
LICEslice[]intdefineRESAMPLE[]resample[]int[]defineRESAMPLE[]resample[]int[]def
ineRESAMPLE[][]resample[][]int[]defineRESAMPLE[]OLYresample[]int[]olydefineRESA
MPLE[][]OLYresample[][]int[]olydefineSLICE[]slice[]int[]defineSLICE[]slice[]int
[]defineSLICE[]OLYslice[]int[]olydefinePLANEplane[]intendifdefineIMAGE[]TYPEuns
ignedintendif$ |

\hbox(7.5+2.86108)x469.75499, glue set - 1.0
.\hbox(0.0+0.0)x20.0
.\tenrm i
.\tenrm f
.\tenrm d
.\tenrm e
.etc.

! You can't use `macro parameter character #' in vertical mode.
l.174 #
       ifdef SPM_FLOAT
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   _
l.174 #ifdef SPM_
                 FLOAT
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! You can't use `macro parameter character #' in math mode.
l.175 #
       ifdef SPM_BYTESWAP
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.176 #
       define GET(x) getfloat(x)
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.177 #
       define RESAMPLE resample_float_s
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.178 #
       define RESAMPLE_D resample_d_float_s
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.178 #define RESAMPLE_D resample_d_
                                    float_s
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.179 #
       define SLICE slice_float_s
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.180 #
       define RESAMPLE_0 resample_float_s_0
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.180 #define RESAMPLE_0 resample_float_s_
                                          0
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.181 #
       define RESAMPLE_1 resample_float_s_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.181 #define RESAMPLE_1 resample_float_s_
                                          1
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.182 #
       define RESAMPLE_D_1 resample_d_float_s_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.182 #define RESAMPLE_D_
                         1 resample_d_float_s_1
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.182 #define RESAMPLE_D_1 resample_d_
                                      float_s_1
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.182 #define RESAMPLE_D_1 resample_d_float_s_
                                              1
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.183 #
       define RESAMPLE_POLY resample_float_s_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.183 #define RESAMPLE_POLY resample_float_s_
                                             poly
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.184 #
       define RESAMPLE_D_POLY resample_d_float_s_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.184 #define RESAMPLE_D_
                         POLY resample_d_float_s_poly
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.184 #define RESAMPLE_D_POLY resample_d_
                                         float_s_poly
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.184 #define RESAMPLE_D_POLY resample_d_float_s_
                                                 poly
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.185 #
       define SLICE_0 slice_float_s_0
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.185 #define SLICE_0 slice_float_s_
                                    0
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.186 #
       define SLICE_1 slice_float_s_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.186 #define SLICE_1 slice_float_s_
                                    1
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.187 #
       define SLICE_POLY slice_float_s_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.187 #define SLICE_POLY slice_float_s_
                                       poly
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.188 #
       define PLANE plane_float_s
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.189 #
       else
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.190 #
       define GET(x) (x)
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.191 #
       define RESAMPLE resample_float
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.192 #
       define RESAMPLE_D resample_d_float
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.192 #define RESAMPLE_D resample_d_
                                    float
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.193 #
       define SLICE slice_float
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.194 #
       define RESAMPLE_0 resample_float_0
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.195 #
       define RESAMPLE_1 resample_float_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.196 #
       define RESAMPLE_D_1 resample_d_float_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.196 #define RESAMPLE_D_
                         1 resample_d_float_1
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.196 #define RESAMPLE_D_1 resample_d_
                                      float_1
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.197 #
       define RESAMPLE_POLY resample_float_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.198 #
       define RESAMPLE_D_POLY resample_d_float_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.198 #define RESAMPLE_D_
                         POLY resample_d_float_poly
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.198 #define RESAMPLE_D_POLY resample_d_
                                         float_poly
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.199 #
       define SLICE_0 slice_float_0
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.200 #
       define SLICE_1 slice_float_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.201 #
       define SLICE_POLY slice_float_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.202 #
       define PLANE plane_float
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.203 #
       endif
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.204 #
       define IMAGE_DTYPE float
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.205 #
       endif
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   \par 
l.206 
      
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.


Overfull \hbox (3895.34026pt too wide) in paragraph at lines 174--206
[]\tenrm ifdef SPM$[]\teni LOATifdefSPM[]YTESWAPdefineGET\tenrm (\teni x\tenrm 
)\teni getfloat\tenrm (\teni x\tenrm )\teni defineRESAMPLEresample[]loat[]defin
eRESAMPLE[]resample[][]loat[]defineSLICEslice[]loat[]defineRESAMPLE[]resample[]
loat[][]defineRESAMPLE[]resample[]loat[][]defineRESAMPLE[][]resample[][]loat[][
]defineRESAMPLE[]OLYresample[]loat[][]olydefineRESAMPLE[][]OLYresample[][]loat[
][]olydefineSLICE[]slice[]loat[][]defineSLICE[]slice[]loat[][]defineSLICE[]OLYs
lice[]loat[][]olydefinePLANEplane[]loat[]elsedefineGET\tenrm (\teni x\tenrm )(\
teni x\tenrm )\teni defineRESAMPLEresample[]loatdefineRESAMPLE[]resample[][]loa
tdefineSLICEslice[]loatdefineRESAMPLE[]resample[]loat[]defineRESAMPLE[]resample
[]loat[]defineRESAMPLE[][]resample[][]loat[]defineRESAMPLE[]OLYresample[]loat[]
olydefineRESAMPLE[][]OLYresample[][]loat[]olydefineSLICE[]slice[]loat[]defineSL
ICE[]slice[]loat[]defineSLICE[]OLYslice[]loat[]olydefinePLANEplane[]loatendifde
fineIMAGE[]TYPEfloatendif$ |

\hbox(7.5+2.86108)x469.75499, glue set - 1.0
.\hbox(0.0+0.0)x20.0
.\tenrm i
.\tenrm f
.\tenrm d
.\tenrm e
.etc.

! You can't use `macro parameter character #' in vertical mode.
l.207 #
       ifdef SPM_DOUBLE
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   _
l.207 #ifdef SPM_
                 DOUBLE
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! You can't use `macro parameter character #' in math mode.
l.208 #
       ifdef SPM_BYTESWAP
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.209 #
       define GET(x) getdouble(x)
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.210 #
       define RESAMPLE resample_double_s
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.211 #
       define RESAMPLE_D resample_d_double_s
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.211 #define RESAMPLE_D resample_d_
                                    double_s
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.212 #
       define SLICE slice_double_s
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.213 #
       define RESAMPLE_0 resample_double_s_0
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.213 #define RESAMPLE_0 resample_double_s_
                                           0
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.214 #
       define RESAMPLE_1 resample_double_s_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.214 #define RESAMPLE_1 resample_double_s_
                                           1
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.215 #
       define RESAMPLE_D_1 resample_d_double_s_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.215 #define RESAMPLE_D_
                         1 resample_d_double_s_1
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.215 #define RESAMPLE_D_1 resample_d_
                                      double_s_1
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.215 #define RESAMPLE_D_1 resample_d_double_s_
                                               1
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.216 #
       define RESAMPLE_POLY resample_double_s_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.216 #define RESAMPLE_POLY resample_double_s_
                                              poly
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.217 #
       define RESAMPLE_D_POLY resample_d_double_s_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.217 #define RESAMPLE_D_
                         POLY resample_d_double_s_poly
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.217 #define RESAMPLE_D_POLY resample_d_
                                         double_s_poly
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.217 #define RESAMPLE_D_POLY resample_d_double_s_
                                                  poly
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.218 #
       define SLICE_0 slice_double_s_0
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.218 #define SLICE_0 slice_double_s_
                                     0
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.219 #
       define SLICE_1 slice_double_s_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.219 #define SLICE_1 slice_double_s_
                                     1
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.220 #
       define SLICE_POLY slice_double_s_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.220 #define SLICE_POLY slice_double_s_
                                        poly
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.221 #
       define PLANE plane_double_s
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.222 #
       else
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.223 #
       define GET(x) (x)
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.224 #
       define RESAMPLE resample_double
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.225 #
       define RESAMPLE_D resample_d_double
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.225 #define RESAMPLE_D resample_d_
                                    double
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.226 #
       define SLICE slice_double
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.227 #
       define RESAMPLE_0 resample_double_0
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.228 #
       define RESAMPLE_1 resample_double_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.229 #
       define RESAMPLE_D_1 resample_d_double_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.229 #define RESAMPLE_D_
                         1 resample_d_double_1
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.229 #define RESAMPLE_D_1 resample_d_
                                      double_1
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.230 #
       define RESAMPLE_POLY resample_double_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.231 #
       define RESAMPLE_D_POLY resample_d_double_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Double subscript.
l.231 #define RESAMPLE_D_
                         POLY resample_d_double_poly
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.231 #define RESAMPLE_D_POLY resample_d_
                                         double_poly
I treat `x_1_2' essentially like `x_1{}_2'.

! You can't use `macro parameter character #' in math mode.
l.232 #
       define SLICE_0 slice_double_0
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.233 #
       define SLICE_1 slice_double_1
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.234 #
       define SLICE_POLY slice_double_poly
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.235 #
       define PLANE plane_double
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.236 #
       endif
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.237 #
       define IMAGE_DTYPE double
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in math mode.
l.238 #
       endif
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   \par 
l.239 
      
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.


Overfull \hbox (4041.29567pt too wide) in paragraph at lines 207--239
[]\tenrm ifdef SPM$[]\teni OUBLEifdefSPM[]YTESWAPdefineGET\tenrm (\teni x\tenrm
 )\teni getdouble\tenrm (\teni x\tenrm )\teni defineRESAMPLEresample[]ouble[]de
fineRESAMPLE[]resample[][]ouble[]defineSLICEslice[]ouble[]defineRESAMPLE[]resam
ple[]ouble[][]defineRESAMPLE[]resample[]ouble[][]defineRESAMPLE[][]resample[][]
ouble[][]defineRESAMPLE[]OLYresample[]ouble[][]olydefineRESAMPLE[][]OLYresample
[][]ouble[][]olydefineSLICE[]slice[]ouble[][]defineSLICE[]slice[]ouble[][]defin
eSLICE[]OLYslice[]ouble[][]olydefinePLANEplane[]ouble[]elsedefineGET\tenrm (\te
ni x\tenrm )(\teni x\tenrm )\teni defineRESAMPLEresample[]oubledefineRESAMPLE[]
resample[][]oubledefineSLICEslice[]oubledefineRESAMPLE[]resample[]ouble[]define
RESAMPLE[]resample[]ouble[]defineRESAMPLE[][]resample[][]ouble[]defineRESAMPLE[
]OLYresample[]ouble[]olydefineRESAMPLE[][]OLYresample[][]ouble[]olydefineSLICE[
]slice[]ouble[]defineSLICE[]slice[]ouble[]defineSLICE[]OLYslice[]ouble[]olydefi
nePLANEplane[]oubleendifdefineIMAGE[]TYPEdoubleendif$ |

\hbox(7.5+2.86108)x469.75499, glue set - 1.0
.\hbox(0.0+0.0)x20.0
.\tenrm i
.\tenrm f
.\tenrm d
.\tenrm e
.etc.

! You can't use `macro parameter character #' in vertical mode.
l.240 #
       include <math.h>
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in horizontal mode.
l.241 #
       include <stdlib.h>
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in horizontal mode.
l.242 #
       define RINT(A) floor((A)+0.5)
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! You can't use `macro parameter character #' in horizontal mode.
l.243 #
       include "spm_make_lookup.h"
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   _
l.243 #include "spm_
                    make_lookup.h"
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! You can't use `macro parameter character #' in math mode.
l.244 #
       include "spm_getdata.h"
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   \par 
l.245 
      
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.


Overfull \hbox (60.54866pt too wide) in paragraph at lines 240--245
[]\tenrm include <math.h> in-c-lude <stdlib.h> de-fine RINT(A) floor((A)+0.5) i
n-c-lude "spm$[]\teni ake[]ookup:h\tenrm "\teni include\tenrm "\teni spm[]etdat
a:h\tenrm "$ |

\hbox(7.5+2.86108)x469.75499, glue set - 1.0
.\hbox(0.0+0.0)x20.0
.\tenrm i
.\tenrm n
.\tenrm c
.\tenrm l
.etc.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   _
l.246 static void (*make_
                         lookup)() = make_lookup_poly, (*make_lookup_grad)()...
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   \par 
l.247 
      
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   _
l.249 void RESAMPLE_
                    0(m,vol,out,x,y,z,xdim,ydim,zdim,background, scale,offset)
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Misplaced alignment tab character &.
l.261         if (xcoord>=0 &
                             & xcoord<xdim && ycoord>=0 &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.261         if (xcoord>=0 &&
                               xcoord<xdim && ycoord>=0 &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.261         if (xcoord>=0 && xcoord<xdim &
                                            & ycoord>=0 &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.261         if (xcoord>=0 && xcoord<xdim &&
                                              ycoord>=0 &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.261 ... (xcoord>=0 && xcoord<xdim && ycoord>=0 &
                                                  &
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.261 ...(xcoord>=0 && xcoord<xdim && ycoord>=0 &&
                                                  
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.262             ycoord<ydim &
                               & zcoord>=0 && zcoord<zdim)
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.262             ycoord<ydim &&
                                 zcoord>=0 && zcoord<zdim)
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.262             ycoord<ydim && zcoord>=0 &
                                            & zcoord<zdim)
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.262             ycoord<ydim && zcoord>=0 &&
                                              zcoord<zdim)
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   \par 
l.267 
      
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.


Overfull \hbox (553.80022pt too wide) in paragraph at lines 248--267
[]\tenrm /* Zero or-der hold re-sam-pling - ne-arest ne-igh-bour */ void RESAMP
LE$[](\teni m; vol; out; x; y; z; xdim; ydim; zdim; background; scale; offset\t
enrm )\teni intm; xdim; ydim; zdim\tenrm ; \teni doubleout\tenrm []\teni ; x\te
nrm []\teni ; y\tenrm []\teni ; z\tenrm []\teni ; background; scale\tenrm []\te
ni ; offset\tenrm []; \teni IMAGE[]TYPE \tensy ^^C|

\hbox(7.5+2.5)x469.75499, glue set - 1.0
.\hbox(0.0+0.0)x20.0
.\tenrm /
.\tenrm *
.\glue 3.33333 plus 1.66666 minus 1.11111
.\tenrm Z
.etc.


Overfull \hbox (1005.40927pt too wide) in paragraph at lines 248--267
\teni vol\tenrm []; []$ |

\hbox(7.5+2.5)x469.75499
.\teni v
.\kern0.35878
.\teni o
.\teni l
.\kern0.19678
.etc.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   _
l.270 void RESAMPLE_
                    1(m,vol,out,x,y,z,xdim,ydim,zdim,background, scale,offset)
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   \par 
l.282 
      
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
<to be read again> 
                   $
<to be read again> 
                   \par 
l.282 
      
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
<to be read again> 
                   $
<to be read again> 
                   \par 
l.282 
      
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.


Overfull \hbox (572.02254pt too wide) in paragraph at lines 269--282
[]\tenrm /* First or-der hold re-sam-pling - tri-li-near in-ter-po-la-tion */ v
oid RESAMPLE$[](\teni m; vol; out; x; y; z; xdim; ydim; zdim; background; scale
; offset\tenrm )\teni intm; xdim; ydim; zdim\tenrm ; \teni doubleout\tenrm []\t
eni ; x\tenrm []\teni ; y\tenrm []\teni ; z\tenrm []\teni ; background; scale\t
enrm []\teni ; offset\tenrm []; \teni IMAGE[]TYPE \tensy ^^C|

\hbox(7.5+2.5)x469.75499, glue set - 1.0
.\hbox(0.0+0.0)x20.0
.\tenrm /
.\tenrm *
.\glue 3.33333 plus 1.66666 minus 1.11111
.\tenrm F
.etc.

! Misplaced alignment tab character &.
l.283         if (    zi>=-TINY &
                                 & zi<zdim+TINY-1 &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.283         if (    zi>=-TINY &&
                                   zi<zdim+TINY-1 &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.283 ...    if (    zi>=-TINY && zi<zdim+TINY-1 &
                                                  &
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.283 ...   if (    zi>=-TINY && zi<zdim+TINY-1 &&
                                                  
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.284             yi>=-TINY &
                             & yi<ydim+TINY-1 &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.284             yi>=-TINY &&
                               yi<ydim+TINY-1 &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.284             yi>=-TINY && yi<ydim+TINY-1 &
                                               &
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.284             yi>=-TINY && yi<ydim+TINY-1 &&
                                                
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.285             xi>=-TINY &
                             & xi<xdim+TINY-1)
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.285             xi>=-TINY &&
                               xi<xdim+TINY-1)
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.


Overfull \hbox (12.07959pt too wide) in paragraph at lines 291--294
[]\tenrm xcoord = (int)floor(xi); dx1=xi-xcoord; dx2=1.0-dx1; yco-ord = (int)fl
oor(yi); dy1=yi-ycoord; dy2=1.0-dy1;|

\hbox(7.5+2.5)x469.75499, glue set - 1.0
.\hbox(0.0+0.0)x20.0
.\tenrm x
.\tenrm c
.\tenrm o
.\kern0.27779
.etc.


Overfull \hbox (42.89906pt too wide) in paragraph at lines 299--305
\tenrm ][off1+offx]); k212 = GET(vol[zcoord ][off2]); k112 = GET(vol[zcoord ][o
ff2+offx]); k221 = GET(vol[zcoord+offz][off1]);|

\hbox(7.5+2.5)x469.75499, glue set - 1.0
.\tenrm ]
.\tenrm [
.\tenrm o
.\tenrm  (ligature ff)
.\tenrm 1
.etc.


Overfull \hbox (51.51022pt too wide) in paragraph at lines 299--305
\tenrm k121 = GET(vol[zcoord+offz][off1+offx]); k211 = GET(vol[zcoord+offz][off
2]); k111 = GET(vol[zcoord+offz][off2+offx]); |

\hbox(7.5+2.5)x469.75499, glue set - 1.0
.\tenrm k
.\tenrm 1
.\tenrm 2
.\tenrm 1
.\glue 3.33333 plus 1.66666 minus 1.11111
.etc.

! Too many }'s.
l.312     }
           
You've closed more groups than you opened.
Such booboos are generally harmless, so keep going.

! Too many }'s.
l.313 }
       
You've closed more groups than you opened.
Such booboos are generally harmless, so keep going.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   _
l.316 void RESAMPLE_
                    D_1(m,vol,out,gradx,grady,gradz,x,y,z,xdim,ydim,zdim,bac...
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Double subscript.
l.316 void RESAMPLE_D_
                      1(m,vol,out,gradx,grady,gradz,x,y,z,xdim,ydim,zdim,bac...
I treat `x_1_2' essentially like `x_1{}_2'.

! Misplaced alignment tab character &.
l.328         if (zi>=-TINY &
                             & zi<zdim+TINY-1 &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.328         if (zi>=-TINY &&
                               zi<zdim+TINY-1 &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.328         if (zi>=-TINY && zi<zdim+TINY-1 &
                                               &
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.328         if (zi>=-TINY && zi<zdim+TINY-1 &&
                                                
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.329             yi>=-TINY &
                             & yi<ydim+TINY-1 &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.329             yi>=-TINY &&
                               yi<ydim+TINY-1 &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.329             yi>=-TINY && yi<ydim+TINY-1 &
                                               &
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.329             yi>=-TINY && yi<ydim+TINY-1 &&
                                                
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.330             xi>=-TINY &
                             & xi<xdim+TINY-1)
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.330             xi>=-TINY &&
                               xi<xdim+TINY-1)
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   \par 
l.335 
      
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
<to be read again> 
                   $
<to be read again> 
                   \par 
l.335 
      
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
<to be read again> 
                   $
<to be read again> 
                   \par 
l.335 
      
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
<to be read again> 
                   $
<to be read again> 
                   \par 
l.335 
      
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.


Overfull \hbox (777.19534pt too wide) in paragraph at lines 315--335
[]\tenrm /* First or-der hold re-sam-pling - tri-li-near in-ter-po-la-tion */ v
oid RESAMPLE$[][](\teni m; vol; out; gradx; grady; gradz; x; y; z; xdim; ydim; 
zdim; background; scale; offset\tenrm )\teni intm; xdim; ydim; zdim\tenrm ; \te
ni doubleout\tenrm []\teni ; gradx\tenrm []\teni ; grady\tenrm []\teni ; gradz\
tenrm []\teni ; x\tenrm []\teni ; y\tenrm []\teni ; z\tenrm []\teni ; backgroun
d; scale\tenrm []\teni ; offset\tenrm []; \teni IMAGE[]TYPE \tensy ^^C|

\hbox(7.5+2.5)x469.75499, glue set - 1.0
.\hbox(0.0+0.0)x20.0
.\tenrm /
.\tenrm *
.\glue 3.33333 plus 1.66666 minus 1.11111
.\tenrm F
.etc.


Overfull \hbox (1094.33443pt too wide) in paragraph at lines 315--335
\teni vol\tenrm []; []$ |

\hbox(7.5+2.5)x469.75499
.\teni v
.\kern0.35878
.\teni o
.\teni l
.\kern0.19678
.etc.


Overfull \hbox (12.07959pt too wide) in paragraph at lines 336--339
[]\tenrm xcoord = (int)floor(xi); dx1=xi-xcoord; dx2=1.0-dx1; yco-ord = (int)fl
oor(yi); dy1=yi-ycoord; dy2=1.0-dy1;|

\hbox(7.5+2.5)x469.75499, glue set - 1.0
.\hbox(0.0+0.0)x20.0
.\tenrm x
.\tenrm c
.\tenrm o
.\kern0.27779
.etc.


Overfull \hbox (42.89906pt too wide) in paragraph at lines 344--350
\tenrm ][off1+offx]); k212 = GET(vol[zcoord ][off2]); k112 = GET(vol[zcoord ][o
ff2+offx]); k221 = GET(vol[zcoord+offz][off1]);|

\hbox(7.5+2.5)x469.75499, glue set - 1.0
.\tenrm ]
.\tenrm [
.\tenrm o
.\tenrm  (ligature ff)
.\tenrm 1
.etc.


Overfull \hbox (51.51022pt too wide) in paragraph at lines 344--350
\tenrm k121 = GET(vol[zcoord+offz][off1+offx]); k211 = GET(vol[zcoord+offz][off
2]); k111 = GET(vol[zcoord+offz][off2+offx]); |

\hbox(7.5+2.5)x469.75499, glue set - 1.0
.\tenrm k
.\tenrm 1
.\tenrm 2
.\tenrm 1
.\glue 3.33333 plus 1.66666 minus 1.11111
.etc.


Overfull \hbox (169.46878pt too wide) in paragraph at lines 366--370
[]\tenrm k111 = (k111*dx1 + k211*dx2)*scale[zcoord+offz]+offset[zcoord+offz]; k
121 = (k121*dx1 + k221*dx2)*scale[zcoord+offz]+offset[zcoord+offz];|

\hbox(7.5+2.5)x469.75499, glue set - 1.0
.\hbox(0.0+0.0)x20.0
.\tenrm k
.\tenrm 1
.\tenrm 1
.\tenrm 1
.etc.

 [1]
! Too many }'s.
l.378         }
               
You've closed more groups than you opened.
Such booboos are generally harmless, so keep going.

! Too many }'s.
l.386     }
           
You've closed more groups than you opened.
Such booboos are generally harmless, so keep going.

! Too many }'s.
l.387 }
       
You've closed more groups than you opened.
Such booboos are generally harmless, so keep going.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   _
l.392 void RESAMPLE_
                    POLY(m,vol,out,x,y,z,xdim,ydim,zdim, q,background, scale...
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   \par 
l.400 
      
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
<to be read again> 
                   $
<to be read again> 
                   \par 
l.400 
      
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.


Overfull \hbox (465.39404pt too wide) in paragraph at lines 391--400
[]\tenrm /* Sinc re-sam-pling */ void RESAMPLE$[]\teni OLY\tenrm (\teni m; vol;
 out; x; y; z; xdim; ydim; zdim; q; background; scale; offset\tenrm )\teni intm
; xdim; ydim; zdim; q\tenrm ; \teni doubleout\tenrm []\teni ; x\tenrm []\teni ;
 y\tenrm []\teni ; z\tenrm []\teni ; background; scale\tenrm []\teni ; offset\t
enrm []; \teni IMAGE[]TYPE \tensy ^^C|

\hbox(7.5+2.5)x469.75499, glue set - 1.0
.\hbox(0.0+0.0)x20.0
.\tenrm /
.\tenrm *
.\glue 3.33333 plus 1.66666 minus 1.11111
.\tenrm S
.etc.

! Misplaced alignment tab character &.
l.403         if (z[i]>=1-TINY &
                                & z[i]<=zdim+TINY &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.403         if (z[i]>=1-TINY &&
                                  z[i]<=zdim+TINY &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.403 ...    if (z[i]>=1-TINY && z[i]<=zdim+TINY &
                                                  &
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.403 ...   if (z[i]>=1-TINY && z[i]<=zdim+TINY &&
                                                  
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.404             y[i]>=1-TINY &
                                & y[i]<=ydim+TINY &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.404             y[i]>=1-TINY &&
                                  y[i]<=ydim+TINY &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.404 ...        y[i]>=1-TINY && y[i]<=ydim+TINY &
                                                  &
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.404 ...       y[i]>=1-TINY && y[i]<=ydim+TINY &&
                                                  
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.405             x[i]>=1-TINY &
                                & x[i]<=xdim+TINY)
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.405             x[i]>=1-TINY &&
                                  x[i]<=xdim+TINY)
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.


Overfull \hbox (1.93156pt too wide) in paragraph at lines 401--408
[]\tenrm for (i=0; i<m; i++)  if (z[i]>=1-TINY  z[i]<=zdim+TINY  y[i]>=1-TINY  
y[i]<=ydim+TINY  x[i]>=1-TINY|

\hbox(7.5+2.5)x469.75499, glue set - 1.0
.\hbox(0.0+0.0)x20.0
.\tenrm f
.\tenrm o
.\tenrm r
.\glue 3.33333 plus 1.66666 minus 1.11111
.etc.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   _
l.409             make_
                       lookup(x[i], q, xdim, &dx1, tablex, &tp3end);
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Misplaced alignment tab character &.
l.409             make_lookup(x[i], q, xdim, &
                                              dx1, tablex, &tp3end);
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.409 ...ake_lookup(x[i], q, xdim, &dx1, tablex, &
                                                  tp3end);
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.410             make_lookup(y[i], q, ydim, &
                                              dy1, tabley, &tp2end);
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.410 ...ake_lookup(y[i], q, ydim, &dy1, tabley, &
                                                  tp2end);
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.411             make_lookup(z[i], q, zdim, &
                                              dz1, tablez, &tp1end);
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.411 ...ake_lookup(z[i], q, zdim, &dz1, tablez, &
                                                  tp1end);
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   \par 
l.412 
      
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.


Overfull \hbox (150.53568pt too wide) in paragraph at lines 409--412
[]\tenrm make$[]\teni ookup\tenrm (\teni x\tenrm [\teni i\tenrm ]\teni ; q; xdi
m; dx\tenrm 1\teni ; tablex; tp\tenrm 3\teni end\tenrm ); \teni make[]ookup\ten
rm (\teni y\tenrm [\teni i\tenrm ]\teni ; q; ydim; dy\tenrm 1\teni ; tabley; tp
\tenrm 2\teni end\tenrm ); \teni make[]ookup\tenrm (\teni z\tenrm [\teni i\tenr
m ]\teni ; q; zdim; dz\tenrm 1\teni ; tablez; tp\tenrm 1\teni end\tenrm );$ |

\hbox(7.5+2.5)x469.75499
.\hbox(0.0+0.0)x20.0
.\tenrm m
.\tenrm a
.\tenrm k
.\kern-0.27779
.etc.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   _
l.418                 IMAGE_
                            DTYPE *dp2 = &vol[dz1][dy1];
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Misplaced alignment tab character &.
l.418                 IMAGE_DTYPE *dp2 = &
                                          vol[dz1][dy1];
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Extra }, or forgotten $.
l.432             }
                   
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten $.
l.434         }
               
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten $.
l.436     }
           
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten $.
l.437 }
       
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   \par 
l.438 
      
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.


Overfull \hbox (11.35043pt too wide) in paragraph at lines 416--438
[]\tenrm while(tp1 <= tp1end)  IMAGE$[]\teni TYPE \tensy ^^C \teni dp\tenrm 2 =
 \teni vol\tenrm [\teni dz\tenrm 1][\teni dy\tenrm 1]; \teni doubledat\tenrm 2 
= 0\teni :\tenrm 0\teni ; \tensy ^^C\teni tp\tenrm 2 = \teni tabley\tenrm ; \te
ni while\tenrm (\teni tp\tenrm 2 \teni <\tenrm =|

\hbox(7.5+2.5)x469.75499, glue set - 1.0
.\hbox(0.0+0.0)x20.0
.\tenrm w
.\tenrm h
.\tenrm i
.\tenrm l
.etc.


Overfull \hbox (428.92976pt too wide) in paragraph at lines 416--438
\teni tp\tenrm 2\teni end\tenrm )[]\teni dat\tenrm + =|

\hbox(7.5+2.5)x469.75499
.\teni t
.\teni p
.\tenrm 2
.\teni e
.\teni n
.etc.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   _
l.440 void RESAMPLE_
                    D_POLY(m,vol,out,gradx,grady,gradz,x,y,z,xdim,ydim,zdim,...
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Double subscript.
l.440 void RESAMPLE_D_
                      POLY(m,vol,out,gradx,grady,gradz,x,y,z,xdim,ydim,zdim,...
I treat `x_1_2' essentially like `x_1{}_2'.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   \par 
l.449 
      
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
<to be read again> 
                   $
<to be read again> 
                   \par 
l.449 
      
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.


Overfull \hbox (670.56685pt too wide) in paragraph at lines 439--449
[]\tenrm /* Sinc re-sam-pling */ void RESAMPLE$[][]\teni OLY\tenrm (\teni m; vo
l; out; gradx; grady; gradz; x; y; z; xdim; ydim; zdim; q; background; scale; o
ffset\tenrm )\teni intm; xdim; ydim; zdim; q\tenrm ; \teni doubleout\tenrm []\t
eni ; gradx\tenrm []\teni ; grady\tenrm []\teni ; gradz\tenrm []\teni ; x\tenrm
 []\teni ; y\tenrm []\teni ; z\tenrm []\teni ; background; scale\tenrm []\teni 
; offset\tenrm []; \teni IMAGE[]TYPE \tensy ^^C|

\hbox(7.5+2.5)x469.75499, glue set - 1.0
.\hbox(0.0+0.0)x20.0
.\tenrm /
.\tenrm *
.\glue 3.33333 plus 1.66666 minus 1.11111
.\tenrm S
.etc.


Overfull \hbox (75.483pt too wide) in paragraph at lines 439--449
\teni vol\tenrm []; []$ |

\hbox(7.5+2.5)x469.75499
.\teni v
.\kern0.35878
.\teni o
.\teni l
.\kern0.19678
.etc.

! Misplaced alignment tab character &.
l.452         if (z[i]>=1-TINY &
                                & z[i]<=zdim+TINY &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.452         if (z[i]>=1-TINY &&
                                  z[i]<=zdim+TINY &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.452 ...    if (z[i]>=1-TINY && z[i]<=zdim+TINY &
                                                  &
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.452 ...   if (z[i]>=1-TINY && z[i]<=zdim+TINY &&
                                                  
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.453             y[i]>=1-TINY &
                                & y[i]<=ydim+TINY &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.453             y[i]>=1-TINY &&
                                  y[i]<=ydim+TINY &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.453 ...        y[i]>=1-TINY && y[i]<=ydim+TINY &
                                                  &
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.453 ...       y[i]>=1-TINY && y[i]<=ydim+TINY &&
                                                  
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.454             x[i]>=1-TINY &
                                & x[i]<=xdim+TINY)
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.454             x[i]>=1-TINY &&
                                  x[i]<=xdim+TINY)
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   _
l.458             make_
                       lookup_grad(x[i], q, xdim, &dx1, tablex, dtablex, &tp...
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Misplaced alignment tab character &.
l.458 ...        make_lookup_grad(x[i], q, xdim, &
                                                  dx1, tablex, dtablex, &tp3...
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.458 ...d(x[i], q, xdim, &dx1, tablex, dtablex, &
                                                  tp3end);
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.459 ...        make_lookup_grad(y[i], q, ydim, &
                                                  dy1, tabley, dtabley, &tp2...
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.459 ...d(y[i], q, ydim, &dy1, tabley, dtabley, &
                                                  tp2end);
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.460 ...        make_lookup_grad(z[i], q, zdim, &
                                                  dz1, tablez, dtablez, &tp1...
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.460 ...d(z[i], q, zdim, &dz1, tablez, dtablez, &
                                                  tp1end);
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.466                 IMAGE_DTYPE *d2 = &
                                         vol[dz1][dy1];
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   \par 
l.484 
      
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
<to be read again> 
                   $
<to be read again> 
                   \par 
l.484 
      
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.


Overfull \hbox (1.93156pt too wide) in paragraph at lines 450--484
[]\tenrm for (i=0; i<m; i++)  if (z[i]>=1-TINY  z[i]<=zdim+TINY  y[i]>=1-TINY  
y[i]<=ydim+TINY  x[i]>=1-TINY|

\hbox(7.5+2.5)x469.75499, glue set - 1.0
.\hbox(0.0+0.0)x20.0
.\tenrm f
.\tenrm o
.\tenrm r
.\glue 3.33333 plus 1.66666 minus 1.11111
.etc.


Overfull \hbox (350.40057pt too wide) in paragraph at lines 450--484
\tenrm *dp1; make$[]\teni ookup[]rad\tenrm (\teni x\tenrm [\teni i\tenrm ]\teni
 ; q; xdim; dx\tenrm 1\teni ; tablex; dtablex; tp\tenrm 3\teni end\tenrm ); \te
ni make[]ookup[]rad\tenrm (\teni y\tenrm [\teni i\tenrm ]\teni ; q; ydim; dy\te
nrm 1\teni ; tabley; dtabley; tp\tenrm 2\teni end\tenrm ); \teni make[]ookup[]r
ad\tenrm (\teni z\tenrm [\teni i\tenrm ]\teni ; q; zdim; dz\tenrm 1\teni ; tabl
ez; dtablez; tp\tenrm 1\teni end\tenrm ); \teni tp\tenrm 1 =|

\hbox(7.5+2.86108)x469.75499, glue set - 1.0
.\tenrm *
.\tenrm d
.\tenrm p
.\tenrm 1
.\tenrm ;
.etc.


Overfull \hbox (1796.29259pt too wide) in paragraph at lines 450--484
\teni tablez\tenrm ; \teni dp\tenrm 1 = \teni dtablez\tenrm ; \teni dy\tenrm 1\
tensy ^^C \tenrm = \teni xdim\tenrm ; \teni while\tenrm (\teni tp\tenrm 1 \teni
 <\tenrm = \teni tp\tenrm 1\teni end\tenrm )[]$ |

\hbox(7.5+2.5)x469.75499
.\teni t
.\teni a
.\teni b
.\teni l
.\kern0.19678
.etc.


Overfull \hbox (26.02383pt too wide) in paragraph at lines 485--506
[]\tenrm datx += (dat2x*scale[dz1]) * *(tp1 ); daty += (dat2y*scale[dz1]) * *(t
p1 ); dat2 = dat2*scale[dz1]+offset[dz1];|

\hbox(7.5+2.5)x469.75499, glue set - 1.0
.\hbox(0.0+0.0)x20.0
.\tenrm d
.\tenrm a
.\tenrm t
.\tenrm x
.etc.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   _
l.509 int SLICE_
                0(mat, image, xdim1, ydim1, vol, xdim2, ydim2, zdim2, backgr...
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   \par 
l.517 
      
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
<to be read again> 
                   $
<to be read again> 
                   \par 
l.517 
      
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.


Overfull \hbox (517.59549pt too wide) in paragraph at lines 508--517
[]\tenrm /* Zero or-der hold re-sam-pling - ne-arest ne-igh-bour */ int SLICE$[
](\teni mat; image; xdim\tenrm 1\teni ; ydim\tenrm 1\teni ; vol; xdim\tenrm 2\t
eni ; ydim\tenrm 2\teni ; zdim\tenrm 2\teni ; background; scale; offset\tenrm )
\teni doublemat\tenrm [16]\teni ; background; scale\tenrm []\teni ; offset\tenr
m []; \teni doubleimage\tenrm []; \teni IMAGE[]TYPE \tensy ^^C|

\hbox(7.5+2.5)x469.75499, glue set - 1.0
.\hbox(0.0+0.0)x20.0
.\tenrm /
.\tenrm *
.\glue 3.33333 plus 1.66666 minus 1.11111
.\tenrm Z
.etc.


Overfull \hbox (107.49414pt too wide) in paragraph at lines 508--517
\teni vol\tenrm []; \teni intxdim\tenrm 1\teni ; ydim\tenrm 1\teni ; xdim\tenrm
 2\teni ; ydim\tenrm 2\teni ; zdim\tenrm 2; []$ |

\hbox(7.5+2.5)x469.75499
.\teni v
.\kern0.35878
.\teni o
.\teni l
.\kern0.19678
.etc.

! Misplaced alignment tab character &.
l.539             if (iz4>=0 &
                              & iz4<zdim2 && iy4>=0 && iy4<ydim2 && ix4>=0 &...
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.539             if (iz4>=0 &&
                                iz4<zdim2 && iy4>=0 && iy4<ydim2 && ix4>=0 &...
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.539             if (iz4>=0 && iz4<zdim2 &
                                           & iy4>=0 && iy4<ydim2 && ix4>=0 &...
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.539             if (iz4>=0 && iz4<zdim2 &&
                                             iy4>=0 && iy4<ydim2 && ix4>=0 &...
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.539 ...      if (iz4>=0 && iz4<zdim2 && iy4>=0 &
                                                  & iy4<ydim2 && ix4>=0 && i...
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.539 ...     if (iz4>=0 && iz4<zdim2 && iy4>=0 &&
                                                   iy4<ydim2 && ix4>=0 && ix...
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.539 ...>=0 && iz4<zdim2 && iy4>=0 && iy4<ydim2 &
                                                  & ix4>=0 && ix4<xdim2)
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.539 ...=0 && iz4<zdim2 && iy4>=0 && iy4<ydim2 &&
                                                   ix4>=0 && ix4<xdim2)
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.539 ...<zdim2 && iy4>=0 && iy4<ydim2 && ix4>=0 &
                                                  & ix4<xdim2)
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.539 ...zdim2 && iy4>=0 && iy4<ydim2 && ix4>=0 &&
                                                   ix4<xdim2)
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! You can't use `macro parameter character #' in vertical mode.
l.550 #
       define TINY 5e-2
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   _
l.553 int SLICE_
                1(mat, image, xdim1, ydim1, vol, xdim2, ydim2, zdim2, backgr...
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   \par 
l.561 
      
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
<to be read again> 
                   $
<to be read again> 
                   \par 
l.561 
      
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.


Overfull \hbox (535.81781pt too wide) in paragraph at lines 552--561
[]\tenrm /* First or-der hold re-sam-pling - tri-li-near in-ter-po-la-tion */ i
nt SLICE$[](\teni mat; image; xdim\tenrm 1\teni ; ydim\tenrm 1\teni ; vol; xdim
\tenrm 2\teni ; ydim\tenrm 2\teni ; zdim\tenrm 2\teni ; background; scale; offs
et\tenrm )\teni doublemat\tenrm [16]\teni ; background; scale\tenrm []\teni ; o
ffset\tenrm []; \teni doubleimage\tenrm []; \teni IMAGE[]TYPE \tensy ^^C|

\hbox(7.5+2.5)x469.75499, glue set - 1.0
.\hbox(0.0+0.0)x20.0
.\tenrm /
.\tenrm *
.\glue 3.33333 plus 1.66666 minus 1.11111
.\tenrm F
.etc.


Overfull \hbox (107.49414pt too wide) in paragraph at lines 552--561
\teni vol\tenrm []; \teni intxdim\tenrm 1\teni ; ydim\tenrm 1\teni ; xdim\tenrm
 2\teni ; ydim\tenrm 2\teni ; zdim\tenrm 2; []$ |

\hbox(7.5+2.5)x469.75499
.\teni v
.\kern0.35878
.\teni o
.\teni l
.\kern0.19678
.etc.

! Misplaced alignment tab character &.
l.583             if (    z4>=-TINY &
                                     & z4<zdim2+TINY-1 &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.583             if (    z4>=-TINY &&
                                       z4<zdim2+TINY-1 &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.583 ...   if (    z4>=-TINY && z4<zdim2+TINY-1 &
                                                  &
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.583 ...  if (    z4>=-TINY && z4<zdim2+TINY-1 &&
                                                  
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.584                 y4>=-TINY &
                                 & y4<ydim2+TINY-1 &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.584                 y4>=-TINY &&
                                   y4<ydim2+TINY-1 &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.584 ...           y4>=-TINY && y4<ydim2+TINY-1 &
                                                  &
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.584 ...          y4>=-TINY && y4<ydim2+TINY-1 &&
                                                  
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.585                 x4>=-TINY &
                                 & x4<xdim2+TINY-1)
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.585                 x4>=-TINY &&
                                   x4<xdim2+TINY-1)
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.


Overfull \hbox (7.35724pt too wide) in paragraph at lines 606--609
[]\tenrm /* re-sam-pled pi-xel va-lue (tri-li-near in-ter-po-la-tion) */ image[
t] = (((k222*dx2 + k122*dx1)*dy2 + (k212*dx2|

\hbox(7.5+2.5)x469.75499, glue set - 1.0
.\hbox(0.0+0.0)x20.0
.\tenrm /
.\tenrm *
.\glue 3.33333 plus 1.66666 minus 1.11111
.\tenrm r
.etc.


Overfull \hbox (83.46864pt too wide) in paragraph at lines 606--609
\tenrm + k112*dx1)*dy1)*scale[iz4 ] + of-f-set[iz4 ])*dz2 + (((k221*dx2 + k121*
dx1)*dy2 + (k211*dx2 + k111*dx1)*dy1)*scale[iz4+offz]|

\hbox(7.5+2.5)x469.75499, glue set - 1.0
.\tenrm +
.\glue 3.33333 plus 1.66666 minus 1.11111
.\tenrm k
.\tenrm 1
.\tenrm 1
.etc.

! Too many }'s.
l.616 }
       
You've closed more groups than you opened.
Such booboos are generally harmless, so keep going.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   _
l.620 int SLICE_
                POLY(mat, image, xdim1, ydim1, vol, xdim2, ydim2, zdim2, q, ...
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   \par 
l.628 
      
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
<to be read again> 
                   $
<to be read again> 
                   \par 
l.628 
      
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.


Overfull \hbox (565.75954pt too wide) in paragraph at lines 619--628
[]\tenrm /* Sinc re-sam-pling */ int SLICE$[]\teni OLY\tenrm (\teni mat; image;
 xdim\tenrm 1\teni ; ydim\tenrm 1\teni ; vol; xdim\tenrm 2\teni ; ydim\tenrm 2\
teni ; zdim\tenrm 2\teni ; q; background; scale; offset\tenrm )\teni intydim\te
nrm 1\teni ; xdim\tenrm 1\teni ; xdim\tenrm 2\teni ; ydim\tenrm 2\teni ; zdim\t
enrm 2\teni ; q\tenrm ; \teni doubleimage\tenrm []\teni ; mat\tenrm []\teni ; b
ackground; scale\tenrm []\teni ; offset\tenrm []; \teni IMAGE[]TYPE \tensy ^^C|


\hbox(7.5+2.5)x469.75499, glue set - 1.0
.\hbox(0.0+0.0)x20.0
.\tenrm /
.\tenrm *
.\glue 3.33333 plus 1.66666 minus 1.11111
.\tenrm S
.etc.


Overfull \hbox (173.66223pt too wide) in paragraph at lines 619--628
\teni vol\tenrm []; []$ |

\hbox(7.5+2.5)x469.75499
.\teni v
.\kern0.35878
.\teni o
.\teni l
.\kern0.19678
.etc.

 [2]
! Misplaced alignment tab character &.
l.651             if (z4>=1-TINY &
                                  & z4<=zdim2+TINY &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.651             if (z4>=1-TINY &&
                                    z4<=zdim2+TINY &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.651 ...       if (z4>=1-TINY && z4<=zdim2+TINY &
                                                  &
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.651 ...      if (z4>=1-TINY && z4<=zdim2+TINY &&
                                                  
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.652                 y4>=1-TINY &
                                  & y4<=ydim2+TINY &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.652                 y4>=1-TINY &&
                                    y4<=ydim2+TINY &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.652 ...           y4>=1-TINY && y4<=ydim2+TINY &
                                                  &
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.652 ...          y4>=1-TINY && y4<=ydim2+TINY &&
                                                  
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.653                 x4>=1-TINY &
                                  & x4<=xdim2+TINY)
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.653                 x4>=1-TINY &&
                                    x4<=xdim2+TINY)
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.


Overfull \hbox (0.7905pt too wide) in paragraph at lines 651--656
[]\tenrm if (z4>=1-TINY  z4<=zdim2+TINY  y4>=1-TINY  y4<=ydim2+TINY  x4>=1-TINY
  x4<=xdim2+TINY)|

\hbox(7.5+2.5)x469.75499, glue set - 1.0
.\hbox(0.0+0.0)x20.0
.\tenrm i
.\tenrm f
.\glue 3.33333 plus 1.66666 minus 1.11111
.\tenrm (
.etc.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   _
l.657                 make_
                           lookup(x4, q, xdim2, &dx1, tablex, &tp3end);
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Misplaced alignment tab character &.
l.657                 make_lookup(x4, q, xdim2, &
                                                 dx1, tablex, &tp3end);
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.657 ...make_lookup(x4, q, xdim2, &dx1, tablex, &
                                                  tp3end);
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.658                 make_lookup(y4, q, ydim2, &
                                                 dy1, tabley, &tp2end);
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.658 ...make_lookup(y4, q, ydim2, &dy1, tabley, &
                                                  tp2end);
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.659                 make_lookup(z4, q, zdim2, &
                                                 dz1, tablez, &tp1end);
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.659 ...make_lookup(z4, q, zdim2, &dz1, tablez, &
                                                  tp1end);
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   \par 
l.660 
      
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.


Overfull \hbox (153.53366pt too wide) in paragraph at lines 657--660
[]\tenrm make$[]\teni ookup\tenrm (\teni x\tenrm 4\teni ; q; xdim\tenrm 2\teni 
; dx\tenrm 1\teni ; tablex; tp\tenrm 3\teni end\tenrm ); \teni make[]ookup\tenr
m (\teni y\tenrm 4\teni ; q; ydim\tenrm 2\teni ; dy\tenrm 1\teni ; tabley; tp\t
enrm 2\teni end\tenrm ); \teni make[]ookup\tenrm (\teni z\tenrm 4\teni ; q; zdi
m\tenrm 2\teni ; dz\tenrm 1\teni ; tablez; tp\tenrm 1\teni end\tenrm );$ |

\hbox(7.5+2.5)x469.75499
.\hbox(0.0+0.0)x20.0
.\tenrm m
.\tenrm a
.\tenrm k
.\kern-0.27779
.etc.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   _
l.666                     IMAGE_
                                DTYPE *dp2 = &vol[dz1][dy1];
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Misplaced alignment tab character &.
l.666                     IMAGE_DTYPE *dp2 = &
                                              vol[dz1][dy1];
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Extra }, or forgotten $.
l.680                 }
                       
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten $.
l.682             }
                   
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten $.
l.684         }
               
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten $.
l.685     }
           
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten $.
l.687 }
       
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   \par 
l.688 
      
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.


Overfull \hbox (11.35043pt too wide) in paragraph at lines 664--688
[]\tenrm while(tp1 <= tp1end)  IMAGE$[]\teni TYPE \tensy ^^C \teni dp\tenrm 2 =
 \teni vol\tenrm [\teni dz\tenrm 1][\teni dy\tenrm 1]; \teni doubledat\tenrm 2 
= 0\teni :\tenrm 0\teni ; \tensy ^^C\teni tp\tenrm 2 = \teni tabley\tenrm ; \te
ni while\tenrm (\teni tp\tenrm 2 \teni <\tenrm =|

\hbox(7.5+2.5)x469.75499, glue set - 1.0
.\hbox(0.0+0.0)x20.0
.\tenrm w
.\tenrm h
.\tenrm i
.\tenrm l
.etc.


Overfull \hbox (433.92978pt too wide) in paragraph at lines 664--688
\teni tp\tenrm 2\teni end\tenrm )[]\teni dat\tenrm + =|

\hbox(7.5+2.5)x469.75499
.\teni t
.\teni p
.\tenrm 2
.\teni e
.\teni n
.etc.


Overfull \hbox (24.55165pt too wide) in paragraph at lines 664--688
\tenrm (\teni dat\tenrm 2 \tensy ^^C \teni scale\tenrm [\teni dz\tenrm 1] + \te
ni offset\tenrm [\teni dz\tenrm 1]) \tensy ^^C ^^C\tenrm (\teni tp\tenrm 1 + +)
; \teni dz\tenrm 1 + +; \tensy ^^C\tenrm (\teni image \tenrm + +) = \teni dat\t
enrm ; \teni else \tensy ^^C \tenrm (\teni image \tenrm + +) = \teni background
\tenrm ; \teni return\tenrm (0);$ |

\hbox(7.5+2.5)x469.75499, glue set - 1.0
.\tenrm (
.\teni d
.\teni a
.\teni t
.\tenrm 2
.etc.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   _
l.693 IMAGE_
            DTYPE *vol[];
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   \par 
l.700 
      
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.


Overfull \hbox (406.73767pt too wide) in paragraph at lines 689--700
\tenrm xdim,ydim; do-uble image[], scale[],offset[]; IMAGE$[]\teni TYPE \tensy 
^^C \teni vol\tenrm []; []$ |

\hbox(7.5+2.5)x469.75499, glue set - 1.0
.\tenrm x
.\tenrm d
.\tenrm i
.\tenrm m
.\tenrm ,
.etc.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   _
l.705 IMAGE_
            DTYPE *vol[];
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Misplaced alignment tab character &.
l.709     if (mat[0+0*4] > 1-t &
                                & mat[0+0*4] < 1+t &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.709     if (mat[0+0*4] > 1-t &&
                                  mat[0+0*4] < 1+t &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.709 ...f (mat[0+0*4] > 1-t && mat[0+0*4] < 1+t &
                                                  &
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.709 ... (mat[0+0*4] > 1-t && mat[0+0*4] < 1+t &&
                                                  
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.710         mat[0+1*4] > -t  &
                                & mat[0+1*4] < t   &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.710         mat[0+1*4] > -t  &&
                                  mat[0+1*4] < t   &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.710 ...   mat[0+1*4] > -t  && mat[0+1*4] < t   &
                                                  &
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.710 ...  mat[0+1*4] > -t  && mat[0+1*4] < t   &&
                                                  
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.711         mat[0+2*4] > -t  &
                                & mat[0+2*4] < t   &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.711         mat[0+2*4] > -t  &&
                                  mat[0+2*4] < t   &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.711 ...   mat[0+2*4] > -t  && mat[0+2*4] < t   &
                                                  &
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.711 ...  mat[0+2*4] > -t  && mat[0+2*4] < t   &&
                                                  
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.712         mat[0+3*4] > -t  &
                                & mat[0+3*4] < t   &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.712         mat[0+3*4] > -t  &&
                                  mat[0+3*4] < t   &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.712 ...   mat[0+3*4] > -t  && mat[0+3*4] < t   &
                                                  &
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.712 ...  mat[0+3*4] > -t  && mat[0+3*4] < t   &&
                                                  
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.713         mat[1+0*4] > -t  &
                                & mat[1+0*4] < t   &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.713         mat[1+0*4] > -t  &&
                                  mat[1+0*4] < t   &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.713 ...   mat[1+0*4] > -t  && mat[1+0*4] < t   &
                                                  &
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.713 ...  mat[1+0*4] > -t  && mat[1+0*4] < t   &&
                                                  
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.714         mat[1+1*4] > 1-t &
                                & mat[1+1*4] < 1+t &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.714         mat[1+1*4] > 1-t &&
                                  mat[1+1*4] < 1+t &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.714 ...   mat[1+1*4] > 1-t && mat[1+1*4] < 1+t &
                                                  &
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.714 ...  mat[1+1*4] > 1-t && mat[1+1*4] < 1+t &&
                                                  
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.715         mat[1+2*4] > -t  &
                                & mat[1+2*4] < t   &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.715         mat[1+2*4] > -t  &&
                                  mat[1+2*4] < t   &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.715 ...   mat[1+2*4] > -t  && mat[1+2*4] < t   &
                                                  &
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.715 ...  mat[1+2*4] > -t  && mat[1+2*4] < t   &&
                                                  
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.716         mat[1+3*4] > -t  &
                                & mat[1+3*4] < t   &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.716         mat[1+3*4] > -t  &&
                                  mat[1+3*4] < t   &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.716 ...   mat[1+3*4] > -t  && mat[1+3*4] < t   &
                                                  &
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.716 ...  mat[1+3*4] > -t  && mat[1+3*4] < t   &&
                                                  
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.717         mat[2+0*4] > -t  &
                                & mat[2+0*4] < t   &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.717         mat[2+0*4] > -t  &&
                                  mat[2+0*4] < t   &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.717 ...   mat[2+0*4] > -t  && mat[2+0*4] < t   &
                                                  &
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.717 ...  mat[2+0*4] > -t  && mat[2+0*4] < t   &&
                                                  
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.718         mat[2+1*4] > -t  &
                                & mat[2+1*4] < t   &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.718         mat[2+1*4] > -t  &&
                                  mat[2+1*4] < t   &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.718 ...   mat[2+1*4] > -t  && mat[2+1*4] < t   &
                                                  &
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.718 ...  mat[2+1*4] > -t  && mat[2+1*4] < t   &&
                                                  
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.719         mat[2+2*4] > 1-t &
                                & mat[2+2*4] < 1+t &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.719         mat[2+2*4] > 1-t &&
                                  mat[2+2*4] < 1+t &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.719 ...   mat[2+2*4] > 1-t && mat[2+2*4] < 1+t &
                                                  &
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.719 ...  mat[2+2*4] > 1-t && mat[2+2*4] < 1+t &&
                                                  
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.720 ...   fabs(RINT(mat[2+3*4])-mat[2+3*4])<t  &
                                                  &
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.720 ...  fabs(RINT(mat[2+3*4])-mat[2+3*4])<t  &&
                                                  
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.721         mat[3+0*4] > -t  &
                                & mat[3+0*4] < t   &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.721         mat[3+0*4] > -t  &&
                                  mat[3+0*4] < t   &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.721 ...   mat[3+0*4] > -t  && mat[3+0*4] < t   &
                                                  &
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.721 ...  mat[3+0*4] > -t  && mat[3+0*4] < t   &&
                                                  
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.722         mat[3+1*4] > -t  &
                                & mat[3+1*4] < t   &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.722         mat[3+1*4] > -t  &&
                                  mat[3+1*4] < t   &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.722 ...   mat[3+1*4] > -t  && mat[3+1*4] < t   &
                                                  &
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.722 ...  mat[3+1*4] > -t  && mat[3+1*4] < t   &&
                                                  
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.723         mat[3+2*4] > -t  &
                                & mat[3+2*4] < t   &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.723         mat[3+2*4] > -t  &&
                                  mat[3+2*4] < t   &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.723 ...   mat[3+2*4] > -t  && mat[3+2*4] < t   &
                                                  &
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.723 ...  mat[3+2*4] > -t  && mat[3+2*4] < t   &&
                                                  
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.724         mat[3+3*4] > 1-t &
                                & mat[3+3*4] < 1+t &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.724         mat[3+3*4] > 1-t &&
                                  mat[3+3*4] < 1+t &&
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.724 ...   mat[3+3*4] > 1-t && mat[3+3*4] < 1+t &
                                                  &
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.724 ...  mat[3+3*4] > 1-t && mat[3+3*4] < 1+t &&
                                                  
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.725         xdim1 == xdim2 &
                              & ydim1 == ydim2 && mat[2+3*4]>=1.0 && mat[2+3...
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.725         xdim1 == xdim2 &&
                                ydim1 == ydim2 && mat[2+3*4]>=1.0 && mat[2+3...
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.725         xdim1 == xdim2 && ydim1 == ydim2 &
                                                & mat[2+3*4]>=1.0 && mat[2+3...
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.725         xdim1 == xdim2 && ydim1 == ydim2 &&
                                                  mat[2+3*4]>=1.0 && mat[2+3...
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.725 ...m2 && ydim1 == ydim2 && mat[2+3*4]>=1.0 &
                                                  & mat[2+3*4]<=zdim2)
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
l.725 ...2 && ydim1 == ydim2 && mat[2+3*4]>=1.0 &&
                                                   mat[2+3*4]<=zdim2)
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   \par 
l.752 
      
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.


Overfull \hbox (5962.7498pt too wide) in paragraph at lines 701--752
\tenrm scale[],offset[]; IMAGE$[]\teni TYPE \tensy ^^C \teni vol\tenrm []; []$ 
|

\hbox(7.5+2.86108)x469.75499, glue set - 1.0
.\tenrm s
.\tenrm c
.\tenrm a
.\tenrm l
.\tenrm e
.etc.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   _
l.757 IMAGE_
            DTYPE *vol[];
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   \par 
l.776 
      
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.


Overfull \hbox (2107.68845pt too wide) in paragraph at lines 753--776
\tenrm int m, xdim,ydim,zdim, hold; do-uble out[], x[], y[], z[], back-gro-und,
 scale[],offset[]; IMAGE$[]\teni TYPE \tensy ^^C \teni vol\tenrm []; []$ |

\hbox(7.5+2.86108)x469.75499, glue set - 1.0
.\tenrm i
.\tenrm n
.\kern-0.27779
.\tenrm t
.\glue 3.33333 plus 1.66666 minus 1.11111
.etc.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   _
l.778 void RESAMPLE_
                    D(m,vol,out,gradx,grady,gradz,x,y,z,xdim,ydim,zdim, hold...
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Double subscript.
l.787         RESAMPLE_D_
                         POLY(m,vol,out,gradx,grady,gradz,x,y,z,xdim,ydim,zd...
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.793             RESAMPLE_D_
                             1(m,vol,out,gradx,grady,gradz,x,y,z,xdim,ydim,z...
I treat `x_1_2' essentially like `x_1{}_2'.

! Double subscript.
l.795             RESAMPLE_D_
                             POLY(m,vol,out,gradx,grady,gradz,x,y,z,xdim,ydi...
I treat `x_1_2' essentially like `x_1{}_2'.

! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   \par 
l.798 
      
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.


Overfull \hbox (738.30858pt too wide) in paragraph at lines 777--798
[]\tenrm /* Re-sam-ple image and de-ri-va-ti-ves */ void RESAMPLE$[](\teni m; v
ol; out; gradx; grady; gradz; x; y; z; xdim; ydim; zdim; hold; background; scal
e; offset\tenrm )\teni intm; xdim; ydim; zdim; hold\tenrm ; \teni doubleout\ten
rm []\teni ; gradx\tenrm []\teni ; grady\tenrm []\teni ; gradz\tenrm []\teni ; 
x\tenrm []\teni ; y\tenrm []\teni ; z\tenrm []\teni ; background; scale\tenrm [
]\teni ; offset\tenrm []; \teni IMAGE[]TYPE \tensy ^^C|

\hbox(7.5+2.5)x469.75499, glue set - 1.0
.\hbox(0.0+0.0)x20.0
.\tenrm /
.\tenrm *
.\glue 3.33333 plus 1.66666 minus 1.11111
.\tenrm R
.etc.


Overfull \hbox (1623.51611pt too wide) in paragraph at lines 777--798
\teni vol\tenrm []; []$ |

\hbox(7.5+2.86108)x469.75499
.\teni v
.\kern0.35878
.\teni o
.\teni l
.\kern0.19678
.etc.

)
! Missing $ inserted.
<inserted text> 
                $
<to be read again> 
                   _
<*> spm_vol_utils.c -DSPM_
                          UNSIGNED_CHAR
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Emergency stop.
<*> spm_vol_utils.c -DSPM_UNSIGNED_CHAR
                                       
*** (job aborted, no legal \end found)

Output written on spm_vol_utils.dvi (2 pages, 32784 bytes).
